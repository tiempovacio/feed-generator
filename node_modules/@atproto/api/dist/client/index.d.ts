import { Client as XrpcClient, ServiceClient as XrpcServiceClient } from '@atproto/xrpc';
import * as ComAtprotoAdminDeleteAccount from './types/com/atproto/admin/deleteAccount';
import * as ComAtprotoAdminDisableAccountInvites from './types/com/atproto/admin/disableAccountInvites';
import * as ComAtprotoAdminDisableInviteCodes from './types/com/atproto/admin/disableInviteCodes';
import * as ComAtprotoAdminEmitModerationEvent from './types/com/atproto/admin/emitModerationEvent';
import * as ComAtprotoAdminEnableAccountInvites from './types/com/atproto/admin/enableAccountInvites';
import * as ComAtprotoAdminGetAccountInfo from './types/com/atproto/admin/getAccountInfo';
import * as ComAtprotoAdminGetInviteCodes from './types/com/atproto/admin/getInviteCodes';
import * as ComAtprotoAdminGetModerationEvent from './types/com/atproto/admin/getModerationEvent';
import * as ComAtprotoAdminGetRecord from './types/com/atproto/admin/getRecord';
import * as ComAtprotoAdminGetRepo from './types/com/atproto/admin/getRepo';
import * as ComAtprotoAdminGetSubjectStatus from './types/com/atproto/admin/getSubjectStatus';
import * as ComAtprotoAdminQueryModerationEvents from './types/com/atproto/admin/queryModerationEvents';
import * as ComAtprotoAdminQueryModerationStatuses from './types/com/atproto/admin/queryModerationStatuses';
import * as ComAtprotoAdminSearchRepos from './types/com/atproto/admin/searchRepos';
import * as ComAtprotoAdminSendEmail from './types/com/atproto/admin/sendEmail';
import * as ComAtprotoAdminUpdateAccountEmail from './types/com/atproto/admin/updateAccountEmail';
import * as ComAtprotoAdminUpdateAccountHandle from './types/com/atproto/admin/updateAccountHandle';
import * as ComAtprotoAdminUpdateSubjectStatus from './types/com/atproto/admin/updateSubjectStatus';
import * as ComAtprotoIdentityResolveHandle from './types/com/atproto/identity/resolveHandle';
import * as ComAtprotoIdentityUpdateHandle from './types/com/atproto/identity/updateHandle';
import * as ComAtprotoLabelQueryLabels from './types/com/atproto/label/queryLabels';
import * as ComAtprotoModerationCreateReport from './types/com/atproto/moderation/createReport';
import * as ComAtprotoRepoApplyWrites from './types/com/atproto/repo/applyWrites';
import * as ComAtprotoRepoCreateRecord from './types/com/atproto/repo/createRecord';
import * as ComAtprotoRepoDeleteRecord from './types/com/atproto/repo/deleteRecord';
import * as ComAtprotoRepoDescribeRepo from './types/com/atproto/repo/describeRepo';
import * as ComAtprotoRepoGetRecord from './types/com/atproto/repo/getRecord';
import * as ComAtprotoRepoListRecords from './types/com/atproto/repo/listRecords';
import * as ComAtprotoRepoPutRecord from './types/com/atproto/repo/putRecord';
import * as ComAtprotoRepoUploadBlob from './types/com/atproto/repo/uploadBlob';
import * as ComAtprotoServerConfirmEmail from './types/com/atproto/server/confirmEmail';
import * as ComAtprotoServerCreateAccount from './types/com/atproto/server/createAccount';
import * as ComAtprotoServerCreateAppPassword from './types/com/atproto/server/createAppPassword';
import * as ComAtprotoServerCreateInviteCode from './types/com/atproto/server/createInviteCode';
import * as ComAtprotoServerCreateInviteCodes from './types/com/atproto/server/createInviteCodes';
import * as ComAtprotoServerCreateSession from './types/com/atproto/server/createSession';
import * as ComAtprotoServerDeleteAccount from './types/com/atproto/server/deleteAccount';
import * as ComAtprotoServerDeleteSession from './types/com/atproto/server/deleteSession';
import * as ComAtprotoServerDescribeServer from './types/com/atproto/server/describeServer';
import * as ComAtprotoServerGetAccountInviteCodes from './types/com/atproto/server/getAccountInviteCodes';
import * as ComAtprotoServerGetSession from './types/com/atproto/server/getSession';
import * as ComAtprotoServerListAppPasswords from './types/com/atproto/server/listAppPasswords';
import * as ComAtprotoServerRefreshSession from './types/com/atproto/server/refreshSession';
import * as ComAtprotoServerRequestAccountDelete from './types/com/atproto/server/requestAccountDelete';
import * as ComAtprotoServerRequestEmailConfirmation from './types/com/atproto/server/requestEmailConfirmation';
import * as ComAtprotoServerRequestEmailUpdate from './types/com/atproto/server/requestEmailUpdate';
import * as ComAtprotoServerRequestPasswordReset from './types/com/atproto/server/requestPasswordReset';
import * as ComAtprotoServerReserveSigningKey from './types/com/atproto/server/reserveSigningKey';
import * as ComAtprotoServerResetPassword from './types/com/atproto/server/resetPassword';
import * as ComAtprotoServerRevokeAppPassword from './types/com/atproto/server/revokeAppPassword';
import * as ComAtprotoServerUpdateEmail from './types/com/atproto/server/updateEmail';
import * as ComAtprotoSyncGetBlob from './types/com/atproto/sync/getBlob';
import * as ComAtprotoSyncGetBlocks from './types/com/atproto/sync/getBlocks';
import * as ComAtprotoSyncGetCheckout from './types/com/atproto/sync/getCheckout';
import * as ComAtprotoSyncGetHead from './types/com/atproto/sync/getHead';
import * as ComAtprotoSyncGetLatestCommit from './types/com/atproto/sync/getLatestCommit';
import * as ComAtprotoSyncGetRecord from './types/com/atproto/sync/getRecord';
import * as ComAtprotoSyncGetRepo from './types/com/atproto/sync/getRepo';
import * as ComAtprotoSyncListBlobs from './types/com/atproto/sync/listBlobs';
import * as ComAtprotoSyncListRepos from './types/com/atproto/sync/listRepos';
import * as ComAtprotoSyncNotifyOfUpdate from './types/com/atproto/sync/notifyOfUpdate';
import * as ComAtprotoSyncRequestCrawl from './types/com/atproto/sync/requestCrawl';
import * as ComAtprotoTempFetchLabels from './types/com/atproto/temp/fetchLabels';
import * as ComAtprotoTempImportRepo from './types/com/atproto/temp/importRepo';
import * as ComAtprotoTempPushBlob from './types/com/atproto/temp/pushBlob';
import * as ComAtprotoTempTransferAccount from './types/com/atproto/temp/transferAccount';
import * as AppBskyActorGetPreferences from './types/app/bsky/actor/getPreferences';
import * as AppBskyActorGetProfile from './types/app/bsky/actor/getProfile';
import * as AppBskyActorGetProfiles from './types/app/bsky/actor/getProfiles';
import * as AppBskyActorGetSuggestions from './types/app/bsky/actor/getSuggestions';
import * as AppBskyActorProfile from './types/app/bsky/actor/profile';
import * as AppBskyActorPutPreferences from './types/app/bsky/actor/putPreferences';
import * as AppBskyActorSearchActors from './types/app/bsky/actor/searchActors';
import * as AppBskyActorSearchActorsTypeahead from './types/app/bsky/actor/searchActorsTypeahead';
import * as AppBskyFeedDescribeFeedGenerator from './types/app/bsky/feed/describeFeedGenerator';
import * as AppBskyFeedGenerator from './types/app/bsky/feed/generator';
import * as AppBskyFeedGetActorFeeds from './types/app/bsky/feed/getActorFeeds';
import * as AppBskyFeedGetActorLikes from './types/app/bsky/feed/getActorLikes';
import * as AppBskyFeedGetAuthorFeed from './types/app/bsky/feed/getAuthorFeed';
import * as AppBskyFeedGetFeed from './types/app/bsky/feed/getFeed';
import * as AppBskyFeedGetFeedGenerator from './types/app/bsky/feed/getFeedGenerator';
import * as AppBskyFeedGetFeedGenerators from './types/app/bsky/feed/getFeedGenerators';
import * as AppBskyFeedGetFeedSkeleton from './types/app/bsky/feed/getFeedSkeleton';
import * as AppBskyFeedGetLikes from './types/app/bsky/feed/getLikes';
import * as AppBskyFeedGetListFeed from './types/app/bsky/feed/getListFeed';
import * as AppBskyFeedGetPostThread from './types/app/bsky/feed/getPostThread';
import * as AppBskyFeedGetPosts from './types/app/bsky/feed/getPosts';
import * as AppBskyFeedGetRepostedBy from './types/app/bsky/feed/getRepostedBy';
import * as AppBskyFeedGetSuggestedFeeds from './types/app/bsky/feed/getSuggestedFeeds';
import * as AppBskyFeedGetTimeline from './types/app/bsky/feed/getTimeline';
import * as AppBskyFeedLike from './types/app/bsky/feed/like';
import * as AppBskyFeedPost from './types/app/bsky/feed/post';
import * as AppBskyFeedRepost from './types/app/bsky/feed/repost';
import * as AppBskyFeedSearchPosts from './types/app/bsky/feed/searchPosts';
import * as AppBskyFeedThreadgate from './types/app/bsky/feed/threadgate';
import * as AppBskyGraphBlock from './types/app/bsky/graph/block';
import * as AppBskyGraphFollow from './types/app/bsky/graph/follow';
import * as AppBskyGraphGetBlocks from './types/app/bsky/graph/getBlocks';
import * as AppBskyGraphGetFollowers from './types/app/bsky/graph/getFollowers';
import * as AppBskyGraphGetFollows from './types/app/bsky/graph/getFollows';
import * as AppBskyGraphGetList from './types/app/bsky/graph/getList';
import * as AppBskyGraphGetListBlocks from './types/app/bsky/graph/getListBlocks';
import * as AppBskyGraphGetListMutes from './types/app/bsky/graph/getListMutes';
import * as AppBskyGraphGetLists from './types/app/bsky/graph/getLists';
import * as AppBskyGraphGetMutes from './types/app/bsky/graph/getMutes';
import * as AppBskyGraphGetSuggestedFollowsByActor from './types/app/bsky/graph/getSuggestedFollowsByActor';
import * as AppBskyGraphList from './types/app/bsky/graph/list';
import * as AppBskyGraphListblock from './types/app/bsky/graph/listblock';
import * as AppBskyGraphListitem from './types/app/bsky/graph/listitem';
import * as AppBskyGraphMuteActor from './types/app/bsky/graph/muteActor';
import * as AppBskyGraphMuteActorList from './types/app/bsky/graph/muteActorList';
import * as AppBskyGraphUnmuteActor from './types/app/bsky/graph/unmuteActor';
import * as AppBskyGraphUnmuteActorList from './types/app/bsky/graph/unmuteActorList';
import * as AppBskyNotificationGetUnreadCount from './types/app/bsky/notification/getUnreadCount';
import * as AppBskyNotificationListNotifications from './types/app/bsky/notification/listNotifications';
import * as AppBskyNotificationRegisterPush from './types/app/bsky/notification/registerPush';
import * as AppBskyNotificationUpdateSeen from './types/app/bsky/notification/updateSeen';
import * as AppBskyUnspeccedGetPopular from './types/app/bsky/unspecced/getPopular';
import * as AppBskyUnspeccedGetPopularFeedGenerators from './types/app/bsky/unspecced/getPopularFeedGenerators';
import * as AppBskyUnspeccedGetTimelineSkeleton from './types/app/bsky/unspecced/getTimelineSkeleton';
import * as AppBskyUnspeccedSearchActorsSkeleton from './types/app/bsky/unspecced/searchActorsSkeleton';
import * as AppBskyUnspeccedSearchPostsSkeleton from './types/app/bsky/unspecced/searchPostsSkeleton';
export * as ComAtprotoAdminDefs from './types/com/atproto/admin/defs';
export * as ComAtprotoAdminDeleteAccount from './types/com/atproto/admin/deleteAccount';
export * as ComAtprotoAdminDisableAccountInvites from './types/com/atproto/admin/disableAccountInvites';
export * as ComAtprotoAdminDisableInviteCodes from './types/com/atproto/admin/disableInviteCodes';
export * as ComAtprotoAdminEmitModerationEvent from './types/com/atproto/admin/emitModerationEvent';
export * as ComAtprotoAdminEnableAccountInvites from './types/com/atproto/admin/enableAccountInvites';
export * as ComAtprotoAdminGetAccountInfo from './types/com/atproto/admin/getAccountInfo';
export * as ComAtprotoAdminGetInviteCodes from './types/com/atproto/admin/getInviteCodes';
export * as ComAtprotoAdminGetModerationEvent from './types/com/atproto/admin/getModerationEvent';
export * as ComAtprotoAdminGetRecord from './types/com/atproto/admin/getRecord';
export * as ComAtprotoAdminGetRepo from './types/com/atproto/admin/getRepo';
export * as ComAtprotoAdminGetSubjectStatus from './types/com/atproto/admin/getSubjectStatus';
export * as ComAtprotoAdminQueryModerationEvents from './types/com/atproto/admin/queryModerationEvents';
export * as ComAtprotoAdminQueryModerationStatuses from './types/com/atproto/admin/queryModerationStatuses';
export * as ComAtprotoAdminSearchRepos from './types/com/atproto/admin/searchRepos';
export * as ComAtprotoAdminSendEmail from './types/com/atproto/admin/sendEmail';
export * as ComAtprotoAdminUpdateAccountEmail from './types/com/atproto/admin/updateAccountEmail';
export * as ComAtprotoAdminUpdateAccountHandle from './types/com/atproto/admin/updateAccountHandle';
export * as ComAtprotoAdminUpdateSubjectStatus from './types/com/atproto/admin/updateSubjectStatus';
export * as ComAtprotoIdentityResolveHandle from './types/com/atproto/identity/resolveHandle';
export * as ComAtprotoIdentityUpdateHandle from './types/com/atproto/identity/updateHandle';
export * as ComAtprotoLabelDefs from './types/com/atproto/label/defs';
export * as ComAtprotoLabelQueryLabels from './types/com/atproto/label/queryLabels';
export * as ComAtprotoLabelSubscribeLabels from './types/com/atproto/label/subscribeLabels';
export * as ComAtprotoModerationCreateReport from './types/com/atproto/moderation/createReport';
export * as ComAtprotoModerationDefs from './types/com/atproto/moderation/defs';
export * as ComAtprotoRepoApplyWrites from './types/com/atproto/repo/applyWrites';
export * as ComAtprotoRepoCreateRecord from './types/com/atproto/repo/createRecord';
export * as ComAtprotoRepoDeleteRecord from './types/com/atproto/repo/deleteRecord';
export * as ComAtprotoRepoDescribeRepo from './types/com/atproto/repo/describeRepo';
export * as ComAtprotoRepoGetRecord from './types/com/atproto/repo/getRecord';
export * as ComAtprotoRepoListRecords from './types/com/atproto/repo/listRecords';
export * as ComAtprotoRepoPutRecord from './types/com/atproto/repo/putRecord';
export * as ComAtprotoRepoStrongRef from './types/com/atproto/repo/strongRef';
export * as ComAtprotoRepoUploadBlob from './types/com/atproto/repo/uploadBlob';
export * as ComAtprotoServerConfirmEmail from './types/com/atproto/server/confirmEmail';
export * as ComAtprotoServerCreateAccount from './types/com/atproto/server/createAccount';
export * as ComAtprotoServerCreateAppPassword from './types/com/atproto/server/createAppPassword';
export * as ComAtprotoServerCreateInviteCode from './types/com/atproto/server/createInviteCode';
export * as ComAtprotoServerCreateInviteCodes from './types/com/atproto/server/createInviteCodes';
export * as ComAtprotoServerCreateSession from './types/com/atproto/server/createSession';
export * as ComAtprotoServerDefs from './types/com/atproto/server/defs';
export * as ComAtprotoServerDeleteAccount from './types/com/atproto/server/deleteAccount';
export * as ComAtprotoServerDeleteSession from './types/com/atproto/server/deleteSession';
export * as ComAtprotoServerDescribeServer from './types/com/atproto/server/describeServer';
export * as ComAtprotoServerGetAccountInviteCodes from './types/com/atproto/server/getAccountInviteCodes';
export * as ComAtprotoServerGetSession from './types/com/atproto/server/getSession';
export * as ComAtprotoServerListAppPasswords from './types/com/atproto/server/listAppPasswords';
export * as ComAtprotoServerRefreshSession from './types/com/atproto/server/refreshSession';
export * as ComAtprotoServerRequestAccountDelete from './types/com/atproto/server/requestAccountDelete';
export * as ComAtprotoServerRequestEmailConfirmation from './types/com/atproto/server/requestEmailConfirmation';
export * as ComAtprotoServerRequestEmailUpdate from './types/com/atproto/server/requestEmailUpdate';
export * as ComAtprotoServerRequestPasswordReset from './types/com/atproto/server/requestPasswordReset';
export * as ComAtprotoServerReserveSigningKey from './types/com/atproto/server/reserveSigningKey';
export * as ComAtprotoServerResetPassword from './types/com/atproto/server/resetPassword';
export * as ComAtprotoServerRevokeAppPassword from './types/com/atproto/server/revokeAppPassword';
export * as ComAtprotoServerUpdateEmail from './types/com/atproto/server/updateEmail';
export * as ComAtprotoSyncGetBlob from './types/com/atproto/sync/getBlob';
export * as ComAtprotoSyncGetBlocks from './types/com/atproto/sync/getBlocks';
export * as ComAtprotoSyncGetCheckout from './types/com/atproto/sync/getCheckout';
export * as ComAtprotoSyncGetHead from './types/com/atproto/sync/getHead';
export * as ComAtprotoSyncGetLatestCommit from './types/com/atproto/sync/getLatestCommit';
export * as ComAtprotoSyncGetRecord from './types/com/atproto/sync/getRecord';
export * as ComAtprotoSyncGetRepo from './types/com/atproto/sync/getRepo';
export * as ComAtprotoSyncListBlobs from './types/com/atproto/sync/listBlobs';
export * as ComAtprotoSyncListRepos from './types/com/atproto/sync/listRepos';
export * as ComAtprotoSyncNotifyOfUpdate from './types/com/atproto/sync/notifyOfUpdate';
export * as ComAtprotoSyncRequestCrawl from './types/com/atproto/sync/requestCrawl';
export * as ComAtprotoSyncSubscribeRepos from './types/com/atproto/sync/subscribeRepos';
export * as ComAtprotoTempFetchLabels from './types/com/atproto/temp/fetchLabels';
export * as ComAtprotoTempImportRepo from './types/com/atproto/temp/importRepo';
export * as ComAtprotoTempPushBlob from './types/com/atproto/temp/pushBlob';
export * as ComAtprotoTempTransferAccount from './types/com/atproto/temp/transferAccount';
export * as AppBskyActorDefs from './types/app/bsky/actor/defs';
export * as AppBskyActorGetPreferences from './types/app/bsky/actor/getPreferences';
export * as AppBskyActorGetProfile from './types/app/bsky/actor/getProfile';
export * as AppBskyActorGetProfiles from './types/app/bsky/actor/getProfiles';
export * as AppBskyActorGetSuggestions from './types/app/bsky/actor/getSuggestions';
export * as AppBskyActorProfile from './types/app/bsky/actor/profile';
export * as AppBskyActorPutPreferences from './types/app/bsky/actor/putPreferences';
export * as AppBskyActorSearchActors from './types/app/bsky/actor/searchActors';
export * as AppBskyActorSearchActorsTypeahead from './types/app/bsky/actor/searchActorsTypeahead';
export * as AppBskyEmbedExternal from './types/app/bsky/embed/external';
export * as AppBskyEmbedImages from './types/app/bsky/embed/images';
export * as AppBskyEmbedRecord from './types/app/bsky/embed/record';
export * as AppBskyEmbedRecordWithMedia from './types/app/bsky/embed/recordWithMedia';
export * as AppBskyFeedDefs from './types/app/bsky/feed/defs';
export * as AppBskyFeedDescribeFeedGenerator from './types/app/bsky/feed/describeFeedGenerator';
export * as AppBskyFeedGenerator from './types/app/bsky/feed/generator';
export * as AppBskyFeedGetActorFeeds from './types/app/bsky/feed/getActorFeeds';
export * as AppBskyFeedGetActorLikes from './types/app/bsky/feed/getActorLikes';
export * as AppBskyFeedGetAuthorFeed from './types/app/bsky/feed/getAuthorFeed';
export * as AppBskyFeedGetFeed from './types/app/bsky/feed/getFeed';
export * as AppBskyFeedGetFeedGenerator from './types/app/bsky/feed/getFeedGenerator';
export * as AppBskyFeedGetFeedGenerators from './types/app/bsky/feed/getFeedGenerators';
export * as AppBskyFeedGetFeedSkeleton from './types/app/bsky/feed/getFeedSkeleton';
export * as AppBskyFeedGetLikes from './types/app/bsky/feed/getLikes';
export * as AppBskyFeedGetListFeed from './types/app/bsky/feed/getListFeed';
export * as AppBskyFeedGetPostThread from './types/app/bsky/feed/getPostThread';
export * as AppBskyFeedGetPosts from './types/app/bsky/feed/getPosts';
export * as AppBskyFeedGetRepostedBy from './types/app/bsky/feed/getRepostedBy';
export * as AppBskyFeedGetSuggestedFeeds from './types/app/bsky/feed/getSuggestedFeeds';
export * as AppBskyFeedGetTimeline from './types/app/bsky/feed/getTimeline';
export * as AppBskyFeedLike from './types/app/bsky/feed/like';
export * as AppBskyFeedPost from './types/app/bsky/feed/post';
export * as AppBskyFeedRepost from './types/app/bsky/feed/repost';
export * as AppBskyFeedSearchPosts from './types/app/bsky/feed/searchPosts';
export * as AppBskyFeedThreadgate from './types/app/bsky/feed/threadgate';
export * as AppBskyGraphBlock from './types/app/bsky/graph/block';
export * as AppBskyGraphDefs from './types/app/bsky/graph/defs';
export * as AppBskyGraphFollow from './types/app/bsky/graph/follow';
export * as AppBskyGraphGetBlocks from './types/app/bsky/graph/getBlocks';
export * as AppBskyGraphGetFollowers from './types/app/bsky/graph/getFollowers';
export * as AppBskyGraphGetFollows from './types/app/bsky/graph/getFollows';
export * as AppBskyGraphGetList from './types/app/bsky/graph/getList';
export * as AppBskyGraphGetListBlocks from './types/app/bsky/graph/getListBlocks';
export * as AppBskyGraphGetListMutes from './types/app/bsky/graph/getListMutes';
export * as AppBskyGraphGetLists from './types/app/bsky/graph/getLists';
export * as AppBskyGraphGetMutes from './types/app/bsky/graph/getMutes';
export * as AppBskyGraphGetSuggestedFollowsByActor from './types/app/bsky/graph/getSuggestedFollowsByActor';
export * as AppBskyGraphList from './types/app/bsky/graph/list';
export * as AppBskyGraphListblock from './types/app/bsky/graph/listblock';
export * as AppBskyGraphListitem from './types/app/bsky/graph/listitem';
export * as AppBskyGraphMuteActor from './types/app/bsky/graph/muteActor';
export * as AppBskyGraphMuteActorList from './types/app/bsky/graph/muteActorList';
export * as AppBskyGraphUnmuteActor from './types/app/bsky/graph/unmuteActor';
export * as AppBskyGraphUnmuteActorList from './types/app/bsky/graph/unmuteActorList';
export * as AppBskyNotificationGetUnreadCount from './types/app/bsky/notification/getUnreadCount';
export * as AppBskyNotificationListNotifications from './types/app/bsky/notification/listNotifications';
export * as AppBskyNotificationRegisterPush from './types/app/bsky/notification/registerPush';
export * as AppBskyNotificationUpdateSeen from './types/app/bsky/notification/updateSeen';
export * as AppBskyRichtextFacet from './types/app/bsky/richtext/facet';
export * as AppBskyUnspeccedDefs from './types/app/bsky/unspecced/defs';
export * as AppBskyUnspeccedGetPopular from './types/app/bsky/unspecced/getPopular';
export * as AppBskyUnspeccedGetPopularFeedGenerators from './types/app/bsky/unspecced/getPopularFeedGenerators';
export * as AppBskyUnspeccedGetTimelineSkeleton from './types/app/bsky/unspecced/getTimelineSkeleton';
export * as AppBskyUnspeccedSearchActorsSkeleton from './types/app/bsky/unspecced/searchActorsSkeleton';
export * as AppBskyUnspeccedSearchPostsSkeleton from './types/app/bsky/unspecced/searchPostsSkeleton';
export declare const COM_ATPROTO_ADMIN: {
    DefsReviewOpen: string;
    DefsReviewEscalated: string;
    DefsReviewClosed: string;
};
export declare const COM_ATPROTO_MODERATION: {
    DefsReasonSpam: string;
    DefsReasonViolation: string;
    DefsReasonMisleading: string;
    DefsReasonSexual: string;
    DefsReasonRude: string;
    DefsReasonOther: string;
    DefsReasonAppeal: string;
};
export declare const APP_BSKY_GRAPH: {
    DefsModlist: string;
    DefsCuratelist: string;
};
export declare class AtpBaseClient {
    xrpc: XrpcClient;
    constructor();
    service(serviceUri: string | URL): AtpServiceClient;
}
export declare class AtpServiceClient {
    _baseClient: AtpBaseClient;
    xrpc: XrpcServiceClient;
    com: ComNS;
    app: AppNS;
    constructor(baseClient: AtpBaseClient, xrpcService: XrpcServiceClient);
    setHeader(key: string, value: string): void;
}
export declare class ComNS {
    _service: AtpServiceClient;
    atproto: AtprotoNS;
    constructor(service: AtpServiceClient);
}
export declare class AtprotoNS {
    _service: AtpServiceClient;
    admin: AdminNS;
    identity: IdentityNS;
    label: LabelNS;
    moderation: ModerationNS;
    repo: RepoNS;
    server: ServerNS;
    sync: SyncNS;
    temp: TempNS;
    constructor(service: AtpServiceClient);
}
export declare class AdminNS {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
    deleteAccount(data?: ComAtprotoAdminDeleteAccount.InputSchema, opts?: ComAtprotoAdminDeleteAccount.CallOptions): Promise<ComAtprotoAdminDeleteAccount.Response>;
    disableAccountInvites(data?: ComAtprotoAdminDisableAccountInvites.InputSchema, opts?: ComAtprotoAdminDisableAccountInvites.CallOptions): Promise<ComAtprotoAdminDisableAccountInvites.Response>;
    disableInviteCodes(data?: ComAtprotoAdminDisableInviteCodes.InputSchema, opts?: ComAtprotoAdminDisableInviteCodes.CallOptions): Promise<ComAtprotoAdminDisableInviteCodes.Response>;
    emitModerationEvent(data?: ComAtprotoAdminEmitModerationEvent.InputSchema, opts?: ComAtprotoAdminEmitModerationEvent.CallOptions): Promise<ComAtprotoAdminEmitModerationEvent.Response>;
    enableAccountInvites(data?: ComAtprotoAdminEnableAccountInvites.InputSchema, opts?: ComAtprotoAdminEnableAccountInvites.CallOptions): Promise<ComAtprotoAdminEnableAccountInvites.Response>;
    getAccountInfo(params?: ComAtprotoAdminGetAccountInfo.QueryParams, opts?: ComAtprotoAdminGetAccountInfo.CallOptions): Promise<ComAtprotoAdminGetAccountInfo.Response>;
    getInviteCodes(params?: ComAtprotoAdminGetInviteCodes.QueryParams, opts?: ComAtprotoAdminGetInviteCodes.CallOptions): Promise<ComAtprotoAdminGetInviteCodes.Response>;
    getModerationEvent(params?: ComAtprotoAdminGetModerationEvent.QueryParams, opts?: ComAtprotoAdminGetModerationEvent.CallOptions): Promise<ComAtprotoAdminGetModerationEvent.Response>;
    getRecord(params?: ComAtprotoAdminGetRecord.QueryParams, opts?: ComAtprotoAdminGetRecord.CallOptions): Promise<ComAtprotoAdminGetRecord.Response>;
    getRepo(params?: ComAtprotoAdminGetRepo.QueryParams, opts?: ComAtprotoAdminGetRepo.CallOptions): Promise<ComAtprotoAdminGetRepo.Response>;
    getSubjectStatus(params?: ComAtprotoAdminGetSubjectStatus.QueryParams, opts?: ComAtprotoAdminGetSubjectStatus.CallOptions): Promise<ComAtprotoAdminGetSubjectStatus.Response>;
    queryModerationEvents(params?: ComAtprotoAdminQueryModerationEvents.QueryParams, opts?: ComAtprotoAdminQueryModerationEvents.CallOptions): Promise<ComAtprotoAdminQueryModerationEvents.Response>;
    queryModerationStatuses(params?: ComAtprotoAdminQueryModerationStatuses.QueryParams, opts?: ComAtprotoAdminQueryModerationStatuses.CallOptions): Promise<ComAtprotoAdminQueryModerationStatuses.Response>;
    searchRepos(params?: ComAtprotoAdminSearchRepos.QueryParams, opts?: ComAtprotoAdminSearchRepos.CallOptions): Promise<ComAtprotoAdminSearchRepos.Response>;
    sendEmail(data?: ComAtprotoAdminSendEmail.InputSchema, opts?: ComAtprotoAdminSendEmail.CallOptions): Promise<ComAtprotoAdminSendEmail.Response>;
    updateAccountEmail(data?: ComAtprotoAdminUpdateAccountEmail.InputSchema, opts?: ComAtprotoAdminUpdateAccountEmail.CallOptions): Promise<ComAtprotoAdminUpdateAccountEmail.Response>;
    updateAccountHandle(data?: ComAtprotoAdminUpdateAccountHandle.InputSchema, opts?: ComAtprotoAdminUpdateAccountHandle.CallOptions): Promise<ComAtprotoAdminUpdateAccountHandle.Response>;
    updateSubjectStatus(data?: ComAtprotoAdminUpdateSubjectStatus.InputSchema, opts?: ComAtprotoAdminUpdateSubjectStatus.CallOptions): Promise<ComAtprotoAdminUpdateSubjectStatus.Response>;
}
export declare class IdentityNS {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
    resolveHandle(params?: ComAtprotoIdentityResolveHandle.QueryParams, opts?: ComAtprotoIdentityResolveHandle.CallOptions): Promise<ComAtprotoIdentityResolveHandle.Response>;
    updateHandle(data?: ComAtprotoIdentityUpdateHandle.InputSchema, opts?: ComAtprotoIdentityUpdateHandle.CallOptions): Promise<ComAtprotoIdentityUpdateHandle.Response>;
}
export declare class LabelNS {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
    queryLabels(params?: ComAtprotoLabelQueryLabels.QueryParams, opts?: ComAtprotoLabelQueryLabels.CallOptions): Promise<ComAtprotoLabelQueryLabels.Response>;
}
export declare class ModerationNS {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
    createReport(data?: ComAtprotoModerationCreateReport.InputSchema, opts?: ComAtprotoModerationCreateReport.CallOptions): Promise<ComAtprotoModerationCreateReport.Response>;
}
export declare class RepoNS {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
    applyWrites(data?: ComAtprotoRepoApplyWrites.InputSchema, opts?: ComAtprotoRepoApplyWrites.CallOptions): Promise<ComAtprotoRepoApplyWrites.Response>;
    createRecord(data?: ComAtprotoRepoCreateRecord.InputSchema, opts?: ComAtprotoRepoCreateRecord.CallOptions): Promise<ComAtprotoRepoCreateRecord.Response>;
    deleteRecord(data?: ComAtprotoRepoDeleteRecord.InputSchema, opts?: ComAtprotoRepoDeleteRecord.CallOptions): Promise<ComAtprotoRepoDeleteRecord.Response>;
    describeRepo(params?: ComAtprotoRepoDescribeRepo.QueryParams, opts?: ComAtprotoRepoDescribeRepo.CallOptions): Promise<ComAtprotoRepoDescribeRepo.Response>;
    getRecord(params?: ComAtprotoRepoGetRecord.QueryParams, opts?: ComAtprotoRepoGetRecord.CallOptions): Promise<ComAtprotoRepoGetRecord.Response>;
    listRecords(params?: ComAtprotoRepoListRecords.QueryParams, opts?: ComAtprotoRepoListRecords.CallOptions): Promise<ComAtprotoRepoListRecords.Response>;
    putRecord(data?: ComAtprotoRepoPutRecord.InputSchema, opts?: ComAtprotoRepoPutRecord.CallOptions): Promise<ComAtprotoRepoPutRecord.Response>;
    uploadBlob(data?: ComAtprotoRepoUploadBlob.InputSchema, opts?: ComAtprotoRepoUploadBlob.CallOptions): Promise<ComAtprotoRepoUploadBlob.Response>;
}
export declare class ServerNS {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
    confirmEmail(data?: ComAtprotoServerConfirmEmail.InputSchema, opts?: ComAtprotoServerConfirmEmail.CallOptions): Promise<ComAtprotoServerConfirmEmail.Response>;
    createAccount(data?: ComAtprotoServerCreateAccount.InputSchema, opts?: ComAtprotoServerCreateAccount.CallOptions): Promise<ComAtprotoServerCreateAccount.Response>;
    createAppPassword(data?: ComAtprotoServerCreateAppPassword.InputSchema, opts?: ComAtprotoServerCreateAppPassword.CallOptions): Promise<ComAtprotoServerCreateAppPassword.Response>;
    createInviteCode(data?: ComAtprotoServerCreateInviteCode.InputSchema, opts?: ComAtprotoServerCreateInviteCode.CallOptions): Promise<ComAtprotoServerCreateInviteCode.Response>;
    createInviteCodes(data?: ComAtprotoServerCreateInviteCodes.InputSchema, opts?: ComAtprotoServerCreateInviteCodes.CallOptions): Promise<ComAtprotoServerCreateInviteCodes.Response>;
    createSession(data?: ComAtprotoServerCreateSession.InputSchema, opts?: ComAtprotoServerCreateSession.CallOptions): Promise<ComAtprotoServerCreateSession.Response>;
    deleteAccount(data?: ComAtprotoServerDeleteAccount.InputSchema, opts?: ComAtprotoServerDeleteAccount.CallOptions): Promise<ComAtprotoServerDeleteAccount.Response>;
    deleteSession(data?: ComAtprotoServerDeleteSession.InputSchema, opts?: ComAtprotoServerDeleteSession.CallOptions): Promise<ComAtprotoServerDeleteSession.Response>;
    describeServer(params?: ComAtprotoServerDescribeServer.QueryParams, opts?: ComAtprotoServerDescribeServer.CallOptions): Promise<ComAtprotoServerDescribeServer.Response>;
    getAccountInviteCodes(params?: ComAtprotoServerGetAccountInviteCodes.QueryParams, opts?: ComAtprotoServerGetAccountInviteCodes.CallOptions): Promise<ComAtprotoServerGetAccountInviteCodes.Response>;
    getSession(params?: ComAtprotoServerGetSession.QueryParams, opts?: ComAtprotoServerGetSession.CallOptions): Promise<ComAtprotoServerGetSession.Response>;
    listAppPasswords(params?: ComAtprotoServerListAppPasswords.QueryParams, opts?: ComAtprotoServerListAppPasswords.CallOptions): Promise<ComAtprotoServerListAppPasswords.Response>;
    refreshSession(data?: ComAtprotoServerRefreshSession.InputSchema, opts?: ComAtprotoServerRefreshSession.CallOptions): Promise<ComAtprotoServerRefreshSession.Response>;
    requestAccountDelete(data?: ComAtprotoServerRequestAccountDelete.InputSchema, opts?: ComAtprotoServerRequestAccountDelete.CallOptions): Promise<ComAtprotoServerRequestAccountDelete.Response>;
    requestEmailConfirmation(data?: ComAtprotoServerRequestEmailConfirmation.InputSchema, opts?: ComAtprotoServerRequestEmailConfirmation.CallOptions): Promise<ComAtprotoServerRequestEmailConfirmation.Response>;
    requestEmailUpdate(data?: ComAtprotoServerRequestEmailUpdate.InputSchema, opts?: ComAtprotoServerRequestEmailUpdate.CallOptions): Promise<ComAtprotoServerRequestEmailUpdate.Response>;
    requestPasswordReset(data?: ComAtprotoServerRequestPasswordReset.InputSchema, opts?: ComAtprotoServerRequestPasswordReset.CallOptions): Promise<ComAtprotoServerRequestPasswordReset.Response>;
    reserveSigningKey(data?: ComAtprotoServerReserveSigningKey.InputSchema, opts?: ComAtprotoServerReserveSigningKey.CallOptions): Promise<ComAtprotoServerReserveSigningKey.Response>;
    resetPassword(data?: ComAtprotoServerResetPassword.InputSchema, opts?: ComAtprotoServerResetPassword.CallOptions): Promise<ComAtprotoServerResetPassword.Response>;
    revokeAppPassword(data?: ComAtprotoServerRevokeAppPassword.InputSchema, opts?: ComAtprotoServerRevokeAppPassword.CallOptions): Promise<ComAtprotoServerRevokeAppPassword.Response>;
    updateEmail(data?: ComAtprotoServerUpdateEmail.InputSchema, opts?: ComAtprotoServerUpdateEmail.CallOptions): Promise<ComAtprotoServerUpdateEmail.Response>;
}
export declare class SyncNS {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
    getBlob(params?: ComAtprotoSyncGetBlob.QueryParams, opts?: ComAtprotoSyncGetBlob.CallOptions): Promise<ComAtprotoSyncGetBlob.Response>;
    getBlocks(params?: ComAtprotoSyncGetBlocks.QueryParams, opts?: ComAtprotoSyncGetBlocks.CallOptions): Promise<ComAtprotoSyncGetBlocks.Response>;
    getCheckout(params?: ComAtprotoSyncGetCheckout.QueryParams, opts?: ComAtprotoSyncGetCheckout.CallOptions): Promise<ComAtprotoSyncGetCheckout.Response>;
    getHead(params?: ComAtprotoSyncGetHead.QueryParams, opts?: ComAtprotoSyncGetHead.CallOptions): Promise<ComAtprotoSyncGetHead.Response>;
    getLatestCommit(params?: ComAtprotoSyncGetLatestCommit.QueryParams, opts?: ComAtprotoSyncGetLatestCommit.CallOptions): Promise<ComAtprotoSyncGetLatestCommit.Response>;
    getRecord(params?: ComAtprotoSyncGetRecord.QueryParams, opts?: ComAtprotoSyncGetRecord.CallOptions): Promise<ComAtprotoSyncGetRecord.Response>;
    getRepo(params?: ComAtprotoSyncGetRepo.QueryParams, opts?: ComAtprotoSyncGetRepo.CallOptions): Promise<ComAtprotoSyncGetRepo.Response>;
    listBlobs(params?: ComAtprotoSyncListBlobs.QueryParams, opts?: ComAtprotoSyncListBlobs.CallOptions): Promise<ComAtprotoSyncListBlobs.Response>;
    listRepos(params?: ComAtprotoSyncListRepos.QueryParams, opts?: ComAtprotoSyncListRepos.CallOptions): Promise<ComAtprotoSyncListRepos.Response>;
    notifyOfUpdate(data?: ComAtprotoSyncNotifyOfUpdate.InputSchema, opts?: ComAtprotoSyncNotifyOfUpdate.CallOptions): Promise<ComAtprotoSyncNotifyOfUpdate.Response>;
    requestCrawl(data?: ComAtprotoSyncRequestCrawl.InputSchema, opts?: ComAtprotoSyncRequestCrawl.CallOptions): Promise<ComAtprotoSyncRequestCrawl.Response>;
}
export declare class TempNS {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
    fetchLabels(params?: ComAtprotoTempFetchLabels.QueryParams, opts?: ComAtprotoTempFetchLabels.CallOptions): Promise<ComAtprotoTempFetchLabels.Response>;
    importRepo(data?: ComAtprotoTempImportRepo.InputSchema, opts?: ComAtprotoTempImportRepo.CallOptions): Promise<ComAtprotoTempImportRepo.Response>;
    pushBlob(data?: ComAtprotoTempPushBlob.InputSchema, opts?: ComAtprotoTempPushBlob.CallOptions): Promise<ComAtprotoTempPushBlob.Response>;
    transferAccount(data?: ComAtprotoTempTransferAccount.InputSchema, opts?: ComAtprotoTempTransferAccount.CallOptions): Promise<ComAtprotoTempTransferAccount.Response>;
}
export declare class AppNS {
    _service: AtpServiceClient;
    bsky: BskyNS;
    constructor(service: AtpServiceClient);
}
export declare class BskyNS {
    _service: AtpServiceClient;
    actor: ActorNS;
    embed: EmbedNS;
    feed: FeedNS;
    graph: GraphNS;
    notification: NotificationNS;
    richtext: RichtextNS;
    unspecced: UnspeccedNS;
    constructor(service: AtpServiceClient);
}
export declare class ActorNS {
    _service: AtpServiceClient;
    profile: ProfileRecord;
    constructor(service: AtpServiceClient);
    getPreferences(params?: AppBskyActorGetPreferences.QueryParams, opts?: AppBskyActorGetPreferences.CallOptions): Promise<AppBskyActorGetPreferences.Response>;
    getProfile(params?: AppBskyActorGetProfile.QueryParams, opts?: AppBskyActorGetProfile.CallOptions): Promise<AppBskyActorGetProfile.Response>;
    getProfiles(params?: AppBskyActorGetProfiles.QueryParams, opts?: AppBskyActorGetProfiles.CallOptions): Promise<AppBskyActorGetProfiles.Response>;
    getSuggestions(params?: AppBskyActorGetSuggestions.QueryParams, opts?: AppBskyActorGetSuggestions.CallOptions): Promise<AppBskyActorGetSuggestions.Response>;
    putPreferences(data?: AppBskyActorPutPreferences.InputSchema, opts?: AppBskyActorPutPreferences.CallOptions): Promise<AppBskyActorPutPreferences.Response>;
    searchActors(params?: AppBskyActorSearchActors.QueryParams, opts?: AppBskyActorSearchActors.CallOptions): Promise<AppBskyActorSearchActors.Response>;
    searchActorsTypeahead(params?: AppBskyActorSearchActorsTypeahead.QueryParams, opts?: AppBskyActorSearchActorsTypeahead.CallOptions): Promise<AppBskyActorSearchActorsTypeahead.Response>;
}
export declare class ProfileRecord {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
    list(params: Omit<ComAtprotoRepoListRecords.QueryParams, 'collection'>): Promise<{
        cursor?: string;
        records: {
            uri: string;
            value: AppBskyActorProfile.Record;
        }[];
    }>;
    get(params: Omit<ComAtprotoRepoGetRecord.QueryParams, 'collection'>): Promise<{
        uri: string;
        cid: string;
        value: AppBskyActorProfile.Record;
    }>;
    create(params: Omit<ComAtprotoRepoCreateRecord.InputSchema, 'collection' | 'record'>, record: AppBskyActorProfile.Record, headers?: Record<string, string>): Promise<{
        uri: string;
        cid: string;
    }>;
    delete(params: Omit<ComAtprotoRepoDeleteRecord.InputSchema, 'collection'>, headers?: Record<string, string>): Promise<void>;
}
export declare class EmbedNS {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
}
export declare class FeedNS {
    _service: AtpServiceClient;
    generator: GeneratorRecord;
    like: LikeRecord;
    post: PostRecord;
    repost: RepostRecord;
    threadgate: ThreadgateRecord;
    constructor(service: AtpServiceClient);
    describeFeedGenerator(params?: AppBskyFeedDescribeFeedGenerator.QueryParams, opts?: AppBskyFeedDescribeFeedGenerator.CallOptions): Promise<AppBskyFeedDescribeFeedGenerator.Response>;
    getActorFeeds(params?: AppBskyFeedGetActorFeeds.QueryParams, opts?: AppBskyFeedGetActorFeeds.CallOptions): Promise<AppBskyFeedGetActorFeeds.Response>;
    getActorLikes(params?: AppBskyFeedGetActorLikes.QueryParams, opts?: AppBskyFeedGetActorLikes.CallOptions): Promise<AppBskyFeedGetActorLikes.Response>;
    getAuthorFeed(params?: AppBskyFeedGetAuthorFeed.QueryParams, opts?: AppBskyFeedGetAuthorFeed.CallOptions): Promise<AppBskyFeedGetAuthorFeed.Response>;
    getFeed(params?: AppBskyFeedGetFeed.QueryParams, opts?: AppBskyFeedGetFeed.CallOptions): Promise<AppBskyFeedGetFeed.Response>;
    getFeedGenerator(params?: AppBskyFeedGetFeedGenerator.QueryParams, opts?: AppBskyFeedGetFeedGenerator.CallOptions): Promise<AppBskyFeedGetFeedGenerator.Response>;
    getFeedGenerators(params?: AppBskyFeedGetFeedGenerators.QueryParams, opts?: AppBskyFeedGetFeedGenerators.CallOptions): Promise<AppBskyFeedGetFeedGenerators.Response>;
    getFeedSkeleton(params?: AppBskyFeedGetFeedSkeleton.QueryParams, opts?: AppBskyFeedGetFeedSkeleton.CallOptions): Promise<AppBskyFeedGetFeedSkeleton.Response>;
    getLikes(params?: AppBskyFeedGetLikes.QueryParams, opts?: AppBskyFeedGetLikes.CallOptions): Promise<AppBskyFeedGetLikes.Response>;
    getListFeed(params?: AppBskyFeedGetListFeed.QueryParams, opts?: AppBskyFeedGetListFeed.CallOptions): Promise<AppBskyFeedGetListFeed.Response>;
    getPostThread(params?: AppBskyFeedGetPostThread.QueryParams, opts?: AppBskyFeedGetPostThread.CallOptions): Promise<AppBskyFeedGetPostThread.Response>;
    getPosts(params?: AppBskyFeedGetPosts.QueryParams, opts?: AppBskyFeedGetPosts.CallOptions): Promise<AppBskyFeedGetPosts.Response>;
    getRepostedBy(params?: AppBskyFeedGetRepostedBy.QueryParams, opts?: AppBskyFeedGetRepostedBy.CallOptions): Promise<AppBskyFeedGetRepostedBy.Response>;
    getSuggestedFeeds(params?: AppBskyFeedGetSuggestedFeeds.QueryParams, opts?: AppBskyFeedGetSuggestedFeeds.CallOptions): Promise<AppBskyFeedGetSuggestedFeeds.Response>;
    getTimeline(params?: AppBskyFeedGetTimeline.QueryParams, opts?: AppBskyFeedGetTimeline.CallOptions): Promise<AppBskyFeedGetTimeline.Response>;
    searchPosts(params?: AppBskyFeedSearchPosts.QueryParams, opts?: AppBskyFeedSearchPosts.CallOptions): Promise<AppBskyFeedSearchPosts.Response>;
}
export declare class GeneratorRecord {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
    list(params: Omit<ComAtprotoRepoListRecords.QueryParams, 'collection'>): Promise<{
        cursor?: string;
        records: {
            uri: string;
            value: AppBskyFeedGenerator.Record;
        }[];
    }>;
    get(params: Omit<ComAtprotoRepoGetRecord.QueryParams, 'collection'>): Promise<{
        uri: string;
        cid: string;
        value: AppBskyFeedGenerator.Record;
    }>;
    create(params: Omit<ComAtprotoRepoCreateRecord.InputSchema, 'collection' | 'record'>, record: AppBskyFeedGenerator.Record, headers?: Record<string, string>): Promise<{
        uri: string;
        cid: string;
    }>;
    delete(params: Omit<ComAtprotoRepoDeleteRecord.InputSchema, 'collection'>, headers?: Record<string, string>): Promise<void>;
}
export declare class LikeRecord {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
    list(params: Omit<ComAtprotoRepoListRecords.QueryParams, 'collection'>): Promise<{
        cursor?: string;
        records: {
            uri: string;
            value: AppBskyFeedLike.Record;
        }[];
    }>;
    get(params: Omit<ComAtprotoRepoGetRecord.QueryParams, 'collection'>): Promise<{
        uri: string;
        cid: string;
        value: AppBskyFeedLike.Record;
    }>;
    create(params: Omit<ComAtprotoRepoCreateRecord.InputSchema, 'collection' | 'record'>, record: AppBskyFeedLike.Record, headers?: Record<string, string>): Promise<{
        uri: string;
        cid: string;
    }>;
    delete(params: Omit<ComAtprotoRepoDeleteRecord.InputSchema, 'collection'>, headers?: Record<string, string>): Promise<void>;
}
export declare class PostRecord {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
    list(params: Omit<ComAtprotoRepoListRecords.QueryParams, 'collection'>): Promise<{
        cursor?: string;
        records: {
            uri: string;
            value: AppBskyFeedPost.Record;
        }[];
    }>;
    get(params: Omit<ComAtprotoRepoGetRecord.QueryParams, 'collection'>): Promise<{
        uri: string;
        cid: string;
        value: AppBskyFeedPost.Record;
    }>;
    create(params: Omit<ComAtprotoRepoCreateRecord.InputSchema, 'collection' | 'record'>, record: AppBskyFeedPost.Record, headers?: Record<string, string>): Promise<{
        uri: string;
        cid: string;
    }>;
    delete(params: Omit<ComAtprotoRepoDeleteRecord.InputSchema, 'collection'>, headers?: Record<string, string>): Promise<void>;
}
export declare class RepostRecord {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
    list(params: Omit<ComAtprotoRepoListRecords.QueryParams, 'collection'>): Promise<{
        cursor?: string;
        records: {
            uri: string;
            value: AppBskyFeedRepost.Record;
        }[];
    }>;
    get(params: Omit<ComAtprotoRepoGetRecord.QueryParams, 'collection'>): Promise<{
        uri: string;
        cid: string;
        value: AppBskyFeedRepost.Record;
    }>;
    create(params: Omit<ComAtprotoRepoCreateRecord.InputSchema, 'collection' | 'record'>, record: AppBskyFeedRepost.Record, headers?: Record<string, string>): Promise<{
        uri: string;
        cid: string;
    }>;
    delete(params: Omit<ComAtprotoRepoDeleteRecord.InputSchema, 'collection'>, headers?: Record<string, string>): Promise<void>;
}
export declare class ThreadgateRecord {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
    list(params: Omit<ComAtprotoRepoListRecords.QueryParams, 'collection'>): Promise<{
        cursor?: string;
        records: {
            uri: string;
            value: AppBskyFeedThreadgate.Record;
        }[];
    }>;
    get(params: Omit<ComAtprotoRepoGetRecord.QueryParams, 'collection'>): Promise<{
        uri: string;
        cid: string;
        value: AppBskyFeedThreadgate.Record;
    }>;
    create(params: Omit<ComAtprotoRepoCreateRecord.InputSchema, 'collection' | 'record'>, record: AppBskyFeedThreadgate.Record, headers?: Record<string, string>): Promise<{
        uri: string;
        cid: string;
    }>;
    delete(params: Omit<ComAtprotoRepoDeleteRecord.InputSchema, 'collection'>, headers?: Record<string, string>): Promise<void>;
}
export declare class GraphNS {
    _service: AtpServiceClient;
    block: BlockRecord;
    follow: FollowRecord;
    list: ListRecord;
    listblock: ListblockRecord;
    listitem: ListitemRecord;
    constructor(service: AtpServiceClient);
    getBlocks(params?: AppBskyGraphGetBlocks.QueryParams, opts?: AppBskyGraphGetBlocks.CallOptions): Promise<AppBskyGraphGetBlocks.Response>;
    getFollowers(params?: AppBskyGraphGetFollowers.QueryParams, opts?: AppBskyGraphGetFollowers.CallOptions): Promise<AppBskyGraphGetFollowers.Response>;
    getFollows(params?: AppBskyGraphGetFollows.QueryParams, opts?: AppBskyGraphGetFollows.CallOptions): Promise<AppBskyGraphGetFollows.Response>;
    getList(params?: AppBskyGraphGetList.QueryParams, opts?: AppBskyGraphGetList.CallOptions): Promise<AppBskyGraphGetList.Response>;
    getListBlocks(params?: AppBskyGraphGetListBlocks.QueryParams, opts?: AppBskyGraphGetListBlocks.CallOptions): Promise<AppBskyGraphGetListBlocks.Response>;
    getListMutes(params?: AppBskyGraphGetListMutes.QueryParams, opts?: AppBskyGraphGetListMutes.CallOptions): Promise<AppBskyGraphGetListMutes.Response>;
    getLists(params?: AppBskyGraphGetLists.QueryParams, opts?: AppBskyGraphGetLists.CallOptions): Promise<AppBskyGraphGetLists.Response>;
    getMutes(params?: AppBskyGraphGetMutes.QueryParams, opts?: AppBskyGraphGetMutes.CallOptions): Promise<AppBskyGraphGetMutes.Response>;
    getSuggestedFollowsByActor(params?: AppBskyGraphGetSuggestedFollowsByActor.QueryParams, opts?: AppBskyGraphGetSuggestedFollowsByActor.CallOptions): Promise<AppBskyGraphGetSuggestedFollowsByActor.Response>;
    muteActor(data?: AppBskyGraphMuteActor.InputSchema, opts?: AppBskyGraphMuteActor.CallOptions): Promise<AppBskyGraphMuteActor.Response>;
    muteActorList(data?: AppBskyGraphMuteActorList.InputSchema, opts?: AppBskyGraphMuteActorList.CallOptions): Promise<AppBskyGraphMuteActorList.Response>;
    unmuteActor(data?: AppBskyGraphUnmuteActor.InputSchema, opts?: AppBskyGraphUnmuteActor.CallOptions): Promise<AppBskyGraphUnmuteActor.Response>;
    unmuteActorList(data?: AppBskyGraphUnmuteActorList.InputSchema, opts?: AppBskyGraphUnmuteActorList.CallOptions): Promise<AppBskyGraphUnmuteActorList.Response>;
}
export declare class BlockRecord {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
    list(params: Omit<ComAtprotoRepoListRecords.QueryParams, 'collection'>): Promise<{
        cursor?: string;
        records: {
            uri: string;
            value: AppBskyGraphBlock.Record;
        }[];
    }>;
    get(params: Omit<ComAtprotoRepoGetRecord.QueryParams, 'collection'>): Promise<{
        uri: string;
        cid: string;
        value: AppBskyGraphBlock.Record;
    }>;
    create(params: Omit<ComAtprotoRepoCreateRecord.InputSchema, 'collection' | 'record'>, record: AppBskyGraphBlock.Record, headers?: Record<string, string>): Promise<{
        uri: string;
        cid: string;
    }>;
    delete(params: Omit<ComAtprotoRepoDeleteRecord.InputSchema, 'collection'>, headers?: Record<string, string>): Promise<void>;
}
export declare class FollowRecord {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
    list(params: Omit<ComAtprotoRepoListRecords.QueryParams, 'collection'>): Promise<{
        cursor?: string;
        records: {
            uri: string;
            value: AppBskyGraphFollow.Record;
        }[];
    }>;
    get(params: Omit<ComAtprotoRepoGetRecord.QueryParams, 'collection'>): Promise<{
        uri: string;
        cid: string;
        value: AppBskyGraphFollow.Record;
    }>;
    create(params: Omit<ComAtprotoRepoCreateRecord.InputSchema, 'collection' | 'record'>, record: AppBskyGraphFollow.Record, headers?: Record<string, string>): Promise<{
        uri: string;
        cid: string;
    }>;
    delete(params: Omit<ComAtprotoRepoDeleteRecord.InputSchema, 'collection'>, headers?: Record<string, string>): Promise<void>;
}
export declare class ListRecord {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
    list(params: Omit<ComAtprotoRepoListRecords.QueryParams, 'collection'>): Promise<{
        cursor?: string;
        records: {
            uri: string;
            value: AppBskyGraphList.Record;
        }[];
    }>;
    get(params: Omit<ComAtprotoRepoGetRecord.QueryParams, 'collection'>): Promise<{
        uri: string;
        cid: string;
        value: AppBskyGraphList.Record;
    }>;
    create(params: Omit<ComAtprotoRepoCreateRecord.InputSchema, 'collection' | 'record'>, record: AppBskyGraphList.Record, headers?: Record<string, string>): Promise<{
        uri: string;
        cid: string;
    }>;
    delete(params: Omit<ComAtprotoRepoDeleteRecord.InputSchema, 'collection'>, headers?: Record<string, string>): Promise<void>;
}
export declare class ListblockRecord {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
    list(params: Omit<ComAtprotoRepoListRecords.QueryParams, 'collection'>): Promise<{
        cursor?: string;
        records: {
            uri: string;
            value: AppBskyGraphListblock.Record;
        }[];
    }>;
    get(params: Omit<ComAtprotoRepoGetRecord.QueryParams, 'collection'>): Promise<{
        uri: string;
        cid: string;
        value: AppBskyGraphListblock.Record;
    }>;
    create(params: Omit<ComAtprotoRepoCreateRecord.InputSchema, 'collection' | 'record'>, record: AppBskyGraphListblock.Record, headers?: Record<string, string>): Promise<{
        uri: string;
        cid: string;
    }>;
    delete(params: Omit<ComAtprotoRepoDeleteRecord.InputSchema, 'collection'>, headers?: Record<string, string>): Promise<void>;
}
export declare class ListitemRecord {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
    list(params: Omit<ComAtprotoRepoListRecords.QueryParams, 'collection'>): Promise<{
        cursor?: string;
        records: {
            uri: string;
            value: AppBskyGraphListitem.Record;
        }[];
    }>;
    get(params: Omit<ComAtprotoRepoGetRecord.QueryParams, 'collection'>): Promise<{
        uri: string;
        cid: string;
        value: AppBskyGraphListitem.Record;
    }>;
    create(params: Omit<ComAtprotoRepoCreateRecord.InputSchema, 'collection' | 'record'>, record: AppBskyGraphListitem.Record, headers?: Record<string, string>): Promise<{
        uri: string;
        cid: string;
    }>;
    delete(params: Omit<ComAtprotoRepoDeleteRecord.InputSchema, 'collection'>, headers?: Record<string, string>): Promise<void>;
}
export declare class NotificationNS {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
    getUnreadCount(params?: AppBskyNotificationGetUnreadCount.QueryParams, opts?: AppBskyNotificationGetUnreadCount.CallOptions): Promise<AppBskyNotificationGetUnreadCount.Response>;
    listNotifications(params?: AppBskyNotificationListNotifications.QueryParams, opts?: AppBskyNotificationListNotifications.CallOptions): Promise<AppBskyNotificationListNotifications.Response>;
    registerPush(data?: AppBskyNotificationRegisterPush.InputSchema, opts?: AppBskyNotificationRegisterPush.CallOptions): Promise<AppBskyNotificationRegisterPush.Response>;
    updateSeen(data?: AppBskyNotificationUpdateSeen.InputSchema, opts?: AppBskyNotificationUpdateSeen.CallOptions): Promise<AppBskyNotificationUpdateSeen.Response>;
}
export declare class RichtextNS {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
}
export declare class UnspeccedNS {
    _service: AtpServiceClient;
    constructor(service: AtpServiceClient);
    getPopular(params?: AppBskyUnspeccedGetPopular.QueryParams, opts?: AppBskyUnspeccedGetPopular.CallOptions): Promise<AppBskyUnspeccedGetPopular.Response>;
    getPopularFeedGenerators(params?: AppBskyUnspeccedGetPopularFeedGenerators.QueryParams, opts?: AppBskyUnspeccedGetPopularFeedGenerators.CallOptions): Promise<AppBskyUnspeccedGetPopularFeedGenerators.Response>;
    getTimelineSkeleton(params?: AppBskyUnspeccedGetTimelineSkeleton.QueryParams, opts?: AppBskyUnspeccedGetTimelineSkeleton.CallOptions): Promise<AppBskyUnspeccedGetTimelineSkeleton.Response>;
    searchActorsSkeleton(params?: AppBskyUnspeccedSearchActorsSkeleton.QueryParams, opts?: AppBskyUnspeccedSearchActorsSkeleton.CallOptions): Promise<AppBskyUnspeccedSearchActorsSkeleton.Response>;
    searchPostsSkeleton(params?: AppBskyUnspeccedSearchPostsSkeleton.QueryParams, opts?: AppBskyUnspeccedSearchPostsSkeleton.CallOptions): Promise<AppBskyUnspeccedSearchPostsSkeleton.Response>;
}
