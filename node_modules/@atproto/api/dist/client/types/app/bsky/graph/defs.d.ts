import { ValidationResult } from '@atproto/lexicon';
import * as AppBskyActorDefs from '../actor/defs';
import * as AppBskyRichtextFacet from '../richtext/facet';
export interface ListViewBasic {
    uri: string;
    cid: string;
    name: string;
    purpose: ListPurpose;
    avatar?: string;
    viewer?: ListViewerState;
    indexedAt?: string;
    [k: string]: unknown;
}
export declare function isListViewBasic(v: unknown): v is ListViewBasic;
export declare function validateListViewBasic(v: unknown): ValidationResult;
export interface ListView {
    uri: string;
    cid: string;
    creator: AppBskyActorDefs.ProfileView;
    name: string;
    purpose: ListPurpose;
    description?: string;
    descriptionFacets?: AppBskyRichtextFacet.Main[];
    avatar?: string;
    viewer?: ListViewerState;
    indexedAt: string;
    [k: string]: unknown;
}
export declare function isListView(v: unknown): v is ListView;
export declare function validateListView(v: unknown): ValidationResult;
export interface ListItemView {
    uri: string;
    subject: AppBskyActorDefs.ProfileView;
    [k: string]: unknown;
}
export declare function isListItemView(v: unknown): v is ListItemView;
export declare function validateListItemView(v: unknown): ValidationResult;
export declare type ListPurpose = 'app.bsky.graph.defs#modlist' | 'app.bsky.graph.defs#curatelist' | (string & {});
export declare const MODLIST = "app.bsky.graph.defs#modlist";
export declare const CURATELIST = "app.bsky.graph.defs#curatelist";
export interface ListViewerState {
    muted?: boolean;
    blocked?: string;
    [k: string]: unknown;
}
export declare function isListViewerState(v: unknown): v is ListViewerState;
export declare function validateListViewerState(v: unknown): ValidationResult;
