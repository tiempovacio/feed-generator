import { ValidationResult } from '@atproto/lexicon';
import * as ComAtprotoRepoStrongRef from '../repo/strongRef';
import * as ComAtprotoModerationDefs from '../moderation/defs';
import * as ComAtprotoServerDefs from '../server/defs';
import * as ComAtprotoLabelDefs from '../label/defs';
export interface StatusAttr {
    applied: boolean;
    ref?: string;
    [k: string]: unknown;
}
export declare function isStatusAttr(v: unknown): v is StatusAttr;
export declare function validateStatusAttr(v: unknown): ValidationResult;
export interface ModEventView {
    id: number;
    event: ModEventTakedown | ModEventReverseTakedown | ModEventComment | ModEventReport | ModEventLabel | ModEventAcknowledge | ModEventEscalate | ModEventMute | ModEventEmail | {
        $type: string;
        [k: string]: unknown;
    };
    subject: RepoRef | ComAtprotoRepoStrongRef.Main | {
        $type: string;
        [k: string]: unknown;
    };
    subjectBlobCids: string[];
    createdBy: string;
    createdAt: string;
    creatorHandle?: string;
    subjectHandle?: string;
    [k: string]: unknown;
}
export declare function isModEventView(v: unknown): v is ModEventView;
export declare function validateModEventView(v: unknown): ValidationResult;
export interface ModEventViewDetail {
    id: number;
    event: ModEventTakedown | ModEventReverseTakedown | ModEventComment | ModEventReport | ModEventLabel | ModEventAcknowledge | ModEventEscalate | ModEventMute | ModEventResolveAppeal | {
        $type: string;
        [k: string]: unknown;
    };
    subject: RepoView | RepoViewNotFound | RecordView | RecordViewNotFound | {
        $type: string;
        [k: string]: unknown;
    };
    subjectBlobs: BlobView[];
    createdBy: string;
    createdAt: string;
    [k: string]: unknown;
}
export declare function isModEventViewDetail(v: unknown): v is ModEventViewDetail;
export declare function validateModEventViewDetail(v: unknown): ValidationResult;
export interface ReportView {
    id: number;
    reasonType: ComAtprotoModerationDefs.ReasonType;
    comment?: string;
    subjectRepoHandle?: string;
    subject: RepoRef | ComAtprotoRepoStrongRef.Main | {
        $type: string;
        [k: string]: unknown;
    };
    reportedBy: string;
    createdAt: string;
    resolvedByActionIds: number[];
    [k: string]: unknown;
}
export declare function isReportView(v: unknown): v is ReportView;
export declare function validateReportView(v: unknown): ValidationResult;
export interface SubjectStatusView {
    id: number;
    subject: RepoRef | ComAtprotoRepoStrongRef.Main | {
        $type: string;
        [k: string]: unknown;
    };
    subjectBlobCids?: string[];
    subjectRepoHandle?: string;
    updatedAt: string;
    createdAt: string;
    reviewState: SubjectReviewState;
    comment?: string;
    muteUntil?: string;
    lastReviewedBy?: string;
    lastReviewedAt?: string;
    lastReportedAt?: string;
    lastAppealedAt?: string;
    takendown?: boolean;
    appealed?: boolean;
    suspendUntil?: string;
    [k: string]: unknown;
}
export declare function isSubjectStatusView(v: unknown): v is SubjectStatusView;
export declare function validateSubjectStatusView(v: unknown): ValidationResult;
export interface ReportViewDetail {
    id: number;
    reasonType: ComAtprotoModerationDefs.ReasonType;
    comment?: string;
    subject: RepoView | RepoViewNotFound | RecordView | RecordViewNotFound | {
        $type: string;
        [k: string]: unknown;
    };
    subjectStatus?: SubjectStatusView;
    reportedBy: string;
    createdAt: string;
    resolvedByActions: ModEventView[];
    [k: string]: unknown;
}
export declare function isReportViewDetail(v: unknown): v is ReportViewDetail;
export declare function validateReportViewDetail(v: unknown): ValidationResult;
export interface RepoView {
    did: string;
    handle: string;
    email?: string;
    relatedRecords: {}[];
    indexedAt: string;
    moderation: Moderation;
    invitedBy?: ComAtprotoServerDefs.InviteCode;
    invitesDisabled?: boolean;
    inviteNote?: string;
    [k: string]: unknown;
}
export declare function isRepoView(v: unknown): v is RepoView;
export declare function validateRepoView(v: unknown): ValidationResult;
export interface RepoViewDetail {
    did: string;
    handle: string;
    email?: string;
    relatedRecords: {}[];
    indexedAt: string;
    moderation: ModerationDetail;
    labels?: ComAtprotoLabelDefs.Label[];
    invitedBy?: ComAtprotoServerDefs.InviteCode;
    invites?: ComAtprotoServerDefs.InviteCode[];
    invitesDisabled?: boolean;
    inviteNote?: string;
    emailConfirmedAt?: string;
    [k: string]: unknown;
}
export declare function isRepoViewDetail(v: unknown): v is RepoViewDetail;
export declare function validateRepoViewDetail(v: unknown): ValidationResult;
export interface AccountView {
    did: string;
    handle: string;
    email?: string;
    indexedAt: string;
    invitedBy?: ComAtprotoServerDefs.InviteCode;
    invites?: ComAtprotoServerDefs.InviteCode[];
    invitesDisabled?: boolean;
    emailConfirmedAt?: string;
    inviteNote?: string;
    [k: string]: unknown;
}
export declare function isAccountView(v: unknown): v is AccountView;
export declare function validateAccountView(v: unknown): ValidationResult;
export interface RepoViewNotFound {
    did: string;
    [k: string]: unknown;
}
export declare function isRepoViewNotFound(v: unknown): v is RepoViewNotFound;
export declare function validateRepoViewNotFound(v: unknown): ValidationResult;
export interface RepoRef {
    did: string;
    [k: string]: unknown;
}
export declare function isRepoRef(v: unknown): v is RepoRef;
export declare function validateRepoRef(v: unknown): ValidationResult;
export interface RepoBlobRef {
    did: string;
    cid: string;
    recordUri?: string;
    [k: string]: unknown;
}
export declare function isRepoBlobRef(v: unknown): v is RepoBlobRef;
export declare function validateRepoBlobRef(v: unknown): ValidationResult;
export interface RecordView {
    uri: string;
    cid: string;
    value: {};
    blobCids: string[];
    indexedAt: string;
    moderation: Moderation;
    repo: RepoView;
    [k: string]: unknown;
}
export declare function isRecordView(v: unknown): v is RecordView;
export declare function validateRecordView(v: unknown): ValidationResult;
export interface RecordViewDetail {
    uri: string;
    cid: string;
    value: {};
    blobs: BlobView[];
    labels?: ComAtprotoLabelDefs.Label[];
    indexedAt: string;
    moderation: ModerationDetail;
    repo: RepoView;
    [k: string]: unknown;
}
export declare function isRecordViewDetail(v: unknown): v is RecordViewDetail;
export declare function validateRecordViewDetail(v: unknown): ValidationResult;
export interface RecordViewNotFound {
    uri: string;
    [k: string]: unknown;
}
export declare function isRecordViewNotFound(v: unknown): v is RecordViewNotFound;
export declare function validateRecordViewNotFound(v: unknown): ValidationResult;
export interface Moderation {
    subjectStatus?: SubjectStatusView;
    [k: string]: unknown;
}
export declare function isModeration(v: unknown): v is Moderation;
export declare function validateModeration(v: unknown): ValidationResult;
export interface ModerationDetail {
    subjectStatus?: SubjectStatusView;
    [k: string]: unknown;
}
export declare function isModerationDetail(v: unknown): v is ModerationDetail;
export declare function validateModerationDetail(v: unknown): ValidationResult;
export interface BlobView {
    cid: string;
    mimeType: string;
    size: number;
    createdAt: string;
    details?: ImageDetails | VideoDetails | {
        $type: string;
        [k: string]: unknown;
    };
    moderation?: Moderation;
    [k: string]: unknown;
}
export declare function isBlobView(v: unknown): v is BlobView;
export declare function validateBlobView(v: unknown): ValidationResult;
export interface ImageDetails {
    width: number;
    height: number;
    [k: string]: unknown;
}
export declare function isImageDetails(v: unknown): v is ImageDetails;
export declare function validateImageDetails(v: unknown): ValidationResult;
export interface VideoDetails {
    width: number;
    height: number;
    length: number;
    [k: string]: unknown;
}
export declare function isVideoDetails(v: unknown): v is VideoDetails;
export declare function validateVideoDetails(v: unknown): ValidationResult;
export declare type SubjectReviewState = 'lex:com.atproto.admin.defs#reviewOpen' | 'lex:com.atproto.admin.defs#reviewEscalated' | 'lex:com.atproto.admin.defs#reviewClosed' | (string & {});
export declare const REVIEWOPEN = "com.atproto.admin.defs#reviewOpen";
export declare const REVIEWESCALATED = "com.atproto.admin.defs#reviewEscalated";
export declare const REVIEWCLOSED = "com.atproto.admin.defs#reviewClosed";
export interface ModEventTakedown {
    comment?: string;
    durationInHours?: number;
    [k: string]: unknown;
}
export declare function isModEventTakedown(v: unknown): v is ModEventTakedown;
export declare function validateModEventTakedown(v: unknown): ValidationResult;
export interface ModEventReverseTakedown {
    comment?: string;
    [k: string]: unknown;
}
export declare function isModEventReverseTakedown(v: unknown): v is ModEventReverseTakedown;
export declare function validateModEventReverseTakedown(v: unknown): ValidationResult;
export interface ModEventResolveAppeal {
    comment?: string;
    [k: string]: unknown;
}
export declare function isModEventResolveAppeal(v: unknown): v is ModEventResolveAppeal;
export declare function validateModEventResolveAppeal(v: unknown): ValidationResult;
export interface ModEventComment {
    comment: string;
    sticky?: boolean;
    [k: string]: unknown;
}
export declare function isModEventComment(v: unknown): v is ModEventComment;
export declare function validateModEventComment(v: unknown): ValidationResult;
export interface ModEventReport {
    comment?: string;
    reportType: ComAtprotoModerationDefs.ReasonType;
    [k: string]: unknown;
}
export declare function isModEventReport(v: unknown): v is ModEventReport;
export declare function validateModEventReport(v: unknown): ValidationResult;
export interface ModEventLabel {
    comment?: string;
    createLabelVals: string[];
    negateLabelVals: string[];
    [k: string]: unknown;
}
export declare function isModEventLabel(v: unknown): v is ModEventLabel;
export declare function validateModEventLabel(v: unknown): ValidationResult;
export interface ModEventAcknowledge {
    comment?: string;
    [k: string]: unknown;
}
export declare function isModEventAcknowledge(v: unknown): v is ModEventAcknowledge;
export declare function validateModEventAcknowledge(v: unknown): ValidationResult;
export interface ModEventEscalate {
    comment?: string;
    [k: string]: unknown;
}
export declare function isModEventEscalate(v: unknown): v is ModEventEscalate;
export declare function validateModEventEscalate(v: unknown): ValidationResult;
export interface ModEventMute {
    comment?: string;
    durationInHours: number;
    [k: string]: unknown;
}
export declare function isModEventMute(v: unknown): v is ModEventMute;
export declare function validateModEventMute(v: unknown): ValidationResult;
export interface ModEventUnmute {
    comment?: string;
    [k: string]: unknown;
}
export declare function isModEventUnmute(v: unknown): v is ModEventUnmute;
export declare function validateModEventUnmute(v: unknown): ValidationResult;
export interface ModEventEmail {
    subjectLine: string;
    comment?: string;
    [k: string]: unknown;
}
export declare function isModEventEmail(v: unknown): v is ModEventEmail;
export declare function validateModEventEmail(v: unknown): ValidationResult;
