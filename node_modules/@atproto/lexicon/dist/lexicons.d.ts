import { LexiconDoc, LexUserType, ValidationResult } from './types';
export declare class Lexicons {
    docs: Map<string, LexiconDoc>;
    defs: Map<string, LexUserType>;
    constructor(docs?: LexiconDoc[]);
    add(doc: LexiconDoc): void;
    remove(uri: string): void;
    get(uri: string): LexiconDoc | undefined;
    getDef(uri: string): LexUserType | undefined;
    getDefOrThrow<T extends LexUserType['type'] = LexUserType['type']>(uri: string, types?: readonly T[]): Extract<LexUserType, {
        type: T;
    }>;
    validate(lexUri: string, value: unknown): ValidationResult;
    assertValidRecord(lexUri: string, value: unknown): unknown;
    assertValidXrpcParams(lexUri: string, value: unknown): unknown;
    assertValidXrpcInput(lexUri: string, value: unknown): unknown;
    assertValidXrpcOutput(lexUri: string, value: unknown): unknown;
    assertValidXrpcMessage<T = unknown>(lexUri: string, value: unknown): T;
    resolveLexUri(lexUri: string, ref: string): string;
}
